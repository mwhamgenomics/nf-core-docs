---
import PageLayout from './PageLayout.astro';
import SubHeader from '@components/SubHeader.astro';
import TabBar from '@components/TabBar.astro';
import cache from 'bin/cache';

export interface Props {
    pipeline: string;
    subtitle: string;
    version: string;
    versions?: string[];
    tabItems?: { label: string; href: string; active: boolean; icon?: string }[];
    md_github_url: string;
}

const { pipeline, org, subtitle, version, versions = [], tabItems = [], md_github_url = '' } = Astro.props;
tabItems.unshift({
    label: 'Introduction',
    href: `/`,
    active: Astro.url.pathname === `/`,
    icon: 'fa-solid fa-sign-in',
});
const latestVersion = versions[0];
const schema = await cache.get(`nextflow_schema.json`);
if (schema !== undefined) {
    // Add the parameters tab if there is a schema to the second position
    tabItems.splice(1, 0, {
        label: 'Parameters',
        href: 'parameters',
        active: Astro.url.pathname.endsWith('/parameters/'),
        icon: 'fa-regular fa-list',
    });
}
const gh_url = `https://github.com/${org}/${pipeline}`;
---

<PageLayout
    title={`${org}/${pipeline}`}
    subtitle={subtitle}
    mainpage_container={true}
    md_github_url={md_github_url}
    subfooter={md_github_url !== ''}
>
    <SubHeader pipeline={pipeline} version={version} latestVersion={latestVersion} gh_url={gh_url} slot="sub-header" />
    {
        tabItems.length > 0 && (
            <TabBar items={tabItems}>
                <div class="input-group input-group-sm justify-content-end justify-content-md-center">
                    <label class="input-group-text" for="version_select">
                        <i class="fas fa-tags" />
                    </label>
                    <div class="dropdown">
                        <button
                            class="btn btn-secondary dropdown-toggle rounded-start-0"
                            type="button"
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                        >
                            {version}
                        </button>
                        <ul class="dropdown-menu  dropdown-menu-end w-100">
                            {versions.map((v) => {
                                const url = Astro.url.pathname.replace(`${pipeline}/${version}`, `${pipeline}/${v}`);
                                return (
                                    <li>
                                        <a class={'dropdown-item ' + (v === version ? 'active' : '')} href={url}>
                                            {v}
                                        </a>
                                    </li>
                                );
                            })}
                        </ul>
                    </div>
                </div>
            </TabBar>
        )
    }

    <div>
        <slot />
    </div>
</PageLayout>
<style lang="scss"></style>
