---
import SchemaListing from '@components/SchemaListing.svelte';
import SchemaListingToc from '@components/SchemaListingToc.svelte';
import cache from 'bin/cache';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipeline from '@public/pipeline_info.json';

export function getStaticPaths() {
    var paths: { props: { versions; } }[] = [];
    pipeline.releases.forEach((release) => {
        paths.push({
            props: {
                versions: pipeline.releases.map((release) => release.tag_name)
            }
        });
    });
    return paths;
}
let headings = [];

const md_files = pipeline.md_files.map((file) => file.replace('docs/', '').replace('.md', ''));

let { versions } = Astro.props;
let tabItems = md_files.map((file) => {
    const f = file.split('/');
    const fName = f[f.length - 1];
    return {
        label: fName.replace(/-/g, ' ').replace(/\w\S*/g, (txt) => {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }),
        href: fName,
        active: false,
    };
});

const cache_key = `nextflow_schema.json`;
let schema = await cache
    .get(cache_key)
    .then((response) => {
        return JSON.parse(response);
    })
    .catch((error) => {
        console.log(error);
        return { definitions: {} };
    });

if (schema.definitions && Object.keys(schema.definitions).length > 0) {
    headings = Object.entries(schema.definitions).map(([key, value]) => {
        return {
            slug: key.replaceAll('_', '-'),
            text: value.title,
            depth: 1,
            fa_icon: value.fa_icon,
        };
    });
} else if (schema.properties && Object.keys(schema.properties).length > 0) {
    schema.definitions = schema.properties; // catching the case where there is no definitions but only properties
}
---

<PipelinePageLayout
    pipeline={pipeline.name}
    subtitle={pipeline.description}
    headings={headings}
    version={pipeline.current_tag}
    versions={versions}
    tabItems={tabItems}
>
    <div class="row">
        <div class="col-12 col-md-10">
            {
                Object.keys(schema.definitions).length === 0 && (
                    <div class="alert alert-warning mt-3 " role="alert">
                        <h4 class="text-warning">No nextflow_schema.json file found!</h4>
                        <p>
                            It seems like there is no nextflow_schema.json file with parameters defined for this version
                            of the pipeline. Try a newer version.
                        </p>
                    </div>
                )
            }

            <SchemaListing {schema} client:load />
        </div>
        <div class="col-12 col-md-2 toc order-first order-md-last pe-0">
            <SchemaListingToc headings={headings} client:idle />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss"></style>
